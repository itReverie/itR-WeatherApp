TEST DB

 /*
    public void testCreateDb() throws Throwable
    {
        mContext.deleteDatabase(Weather_DbHelper.DATABASE_NAME);
        SQLiteDatabase db=new Weather_DbHelper(this.mContext).getWritableDatabase();
        assertEquals(true,db.isOpen());
        db.close();
    }

    public void testInsertReadDb_Location() throws Throwable
    {
        String testCityName="North Pole";
        String testLocationSettings = "99705";
        double testLatitude = 64.772;
        double testLongitude =-147.355;

       //INSERT VALUES
       Weather_DbHelper dbHelper=new Weather_DbHelper(mContext);
        SQLiteDatabase db=dbHelper.getWritableDatabase();

        ContentValues values=new ContentValues();
        values.put(Weather_Contract.LocationEntry.COLUMN_CITY_NAME, testCityName);
        values.put(Weather_Contract.LocationEntry.COLUMN_LOCATION_SETTINGS, testLocationSettings);
        values.put(Weather_Contract.LocationEntry.COLUMN_CORD_LATITUDE, testLatitude);
        values.put(Weather_Contract.LocationEntry.COLUMN_CORD_LONGITUDE, testLongitude);


        locationRowId= db.insert(Weather_Contract.LocationEntry.TABLE_NAME, null, values);

        //Verify we get a row back
        assertTrue(locationRowId != -1);
        Log.d(LOG_TAG,"New row id: " + locationRowId);


        //READ VALUES
        String[] columns={Weather_Contract.LocationEntry._ID,
                Weather_Contract.LocationEntry.COLUMN_LOCATION_SETTINGS,
                Weather_Contract.LocationEntry.COLUMN_CITY_NAME,
                Weather_Contract.LocationEntry.COLUMN_CORD_LATITUDE,
                Weather_Contract.LocationEntry.COLUMN_CORD_LONGITUDE};

        //A cursor is your primary interface to the query results
        Cursor cursor= db.query(
                Weather_Contract.LocationEntry.TABLE_NAME,
                columns,
                null, //Columns for the where
                null, //Values for the where
                null, //columns to group by
                null, //columns to filter by row groups
                null //sort order
        );

        // If possible, move to the first row of the query results.
        if (cursor.moveToFirst()) {
            // Get the value in each column by finding the appropriate column index.
            int locationIndex = cursor.getColumnIndex(Weather_Contract.LocationEntry.COLUMN_LOCATION_SETTINGS);
            String location = cursor.getString(locationIndex);

            int nameIndex = cursor.getColumnIndex((Weather_Contract.LocationEntry.COLUMN_CITY_NAME));
            String name = cursor.getString(nameIndex);

            int latIndex = cursor.getColumnIndex((Weather_Contract.LocationEntry.COLUMN_CORD_LATITUDE));
            double latitude = cursor.getDouble(latIndex);

            int longIndex = cursor.getColumnIndex((Weather_Contract.LocationEntry.COLUMN_CORD_LONGITUDE));
            double longitude = cursor.getDouble(longIndex);

            // Hooray, data was returned!  Assert that it's the right data, and that the database
            // creation code is working as intended.
            // Then take a break.  We both know that wasn't easy.
            assertEquals(testCityName, name);
            assertEquals(testLocationSettings, location);
            assertEquals(testLatitude, latitude);
            assertEquals(testLongitude, longitude);

            // Fantastic.  Now that we have a location, add some weather!
        } else {
            // That's weird, it works on MY machine...
            fail("No values returned :(");
        }

        cursor.close();
    }

    public void testInsertReadDb_Weather() throws Throwable
    {
        //INSERT VALUES
        Weather_DbHelper dbHelper=new Weather_DbHelper(mContext);
        SQLiteDatabase db=dbHelper.getWritableDatabase();

        // Fantastic.  Now that we have a location, add some weather!
        ContentValues weatherValues = createWeatherContentValues(locationRowId);

        weatherRowId= db.insert(Weather_Contract.WeatherEntry.TABLE_NAME, null, weatherValues);

        //Verify we get a row back
        assertTrue(weatherRowId != -1);
        Log.d(LOG_TAG,"New row id: " + weatherRowId);


        //A cursor is your primary interface to the query results
        Cursor cursor= db.query(
                Weather_Contract.WeatherEntry.TABLE_NAME,
                null, //if we leave it null, it return all columns
                null, //Columns for the where
                null, //Values for the where
                null, //columns to group by
                null, //columns to filter by row groups
                null //sort order
        );
        validateCursor(cursor,weatherValues);
        cursor.close();
    }
*/

































    static void validateCursor(Cursor valueCursor, ContentValues expectedValues) {

        assertTrue(valueCursor.moveToFirst());

        Set<Map.Entry<String, Object>> valueSet = expectedValues.valueSet();
        for (Map.Entry<String, Object> entry : valueSet) {
            String columnName = entry.getKey();
            int idx = valueCursor.getColumnIndex(columnName);
            assertFalse(idx == -1);
            String expectedValue = entry.getValue().toString();
            assertEquals(expectedValue, valueCursor.getString(idx));
        }
        valueCursor.close();
    }

    static ContentValues createWeatherContentValues(long testLocation)
    {
        String testDateText="20141205";
        double testDegrees=1.1;
        double testHumidity=1.2;
        double testPressure=1.3;
        int testMaxTemp=75;
        int testMinTemp=65;
        String testShortDesc="Asteroids";
        double testWindSpeed=5.5;
        long testWeatherId=321;

        // Fantastic.  Now that we have a location, add some weather!
        ContentValues weatherValues = new ContentValues();
        weatherValues.put(Weather_Contract.WeatherEntry.COLUMN_LOC_KEY,    testLocation);
        weatherValues.put(Weather_Contract.WeatherEntry.COLUMN_DATETEXT,   testDateText);
        weatherValues.put(Weather_Contract.WeatherEntry.COLUMN_DEGREES,    testDegrees);
        weatherValues.put(Weather_Contract.WeatherEntry.COLUMN_HUMIDITY,   testHumidity);
        weatherValues.put(Weather_Contract.WeatherEntry.COLUMN_PRESSURE,   testPressure);
        weatherValues.put(Weather_Contract.WeatherEntry.COLUMN_MAX_TEMP,   testMaxTemp);
        weatherValues.put(Weather_Contract.WeatherEntry.COLUMN_MIN_TEMP,   testMinTemp);
        weatherValues.put(Weather_Contract.WeatherEntry.COLUMN_SHORT_DESC, testShortDesc);
        weatherValues.put(Weather_Contract.WeatherEntry.COLUMN_WIND_SPEED, testWindSpeed);
        weatherValues.put(Weather_Contract.WeatherEntry.COLUMN_WEATHER_ID, testWeatherId);

        return weatherValues;
    }